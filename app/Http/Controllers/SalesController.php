<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\categories; use App\Models\products; use App\Models\sale_details; use App\Models\sale_payments; use App\Models\sales; use App\Models\salesman; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Spatie\Browsershot\Browsershot; class SalesController extends Controller { public function index() { $sales = sales::with("\x70\x61\x79\155\x65\156\x74\x73")->orderby("\151\144", "\x64\x65\163\x63")->paginate(10); return view("\x73\x61\x6c\x65\163\x2e\x69\x6e\x64\145\170", compact("\163\141\154\145\x73")); } public function create() { $products = products::orderby("\156\x61\x6d\145", "\x61\x73\x63")->get(); $warehouses = warehouses::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $cats = categories::orderBy("\x6e\x61\155\x65", "\141\x73\x63")->get(); return view("\x73\141\x6c\145\163\x2e\x63\x72\x65\x61\x74\145", compact("\160\x72\157\x64\165\143\164\x73", "\167\141\x72\x65\x68\x6f\165\x73\x65\x73", "\x63\x75\163\x74\157\155\145\162\x73", "\x61\x63\x63\x6f\x75\156\164\x73", "\143\141\164\x73")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\144")) { throw new Exception("\x50\154\145\141\x73\145\40\x53\145\154\x65\143\x74\x20\x41\x74\154\x65\141\x73\x74\40\x4f\156\x65\40\x50\162\157\144\165\143\164"); } DB::beginTransaction(); $ref = getRef(); $sale = sales::create(array("\143\x75\163\164\x6f\x6d\145\x72\111\104" => $request->customerID, "\144\141\x74\145" => $request->date, "\156\157\164\x65\163" => $request->notes, "\144\151\163\143\157\165\x6e\x74" => $request->discount, "\x64\143" => $request->dc, "\162\x65\x66\111\104" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { if ($request->amount[$key] > 0) { $qty = $request->qty[$key]; $price = $request->price[$key]; $total += $request->amount[$key]; sale_details::create(array("\163\x61\x6c\145\163\x49\x44" => $sale->id, "\160\x72\157\144\x75\143\164\111\104" => $id, "\x70\x72\x69\x63\x65" => $price, "\x77\141\162\x65\150\x6f\165\163\x65\x49\x44" => $request->warehouse[$key], "\x71\x74\x79" => $qty, "\x61\155\x6f\x75\156\x74" => $request->amount[$key], "\x64\x61\x74\x65" => $request->date, "\x72\145\x66\x49\104" => $ref)); createStock($id, 0, $qty, $request->date, "\123\x6f\154\x64\40\x69\x6e\x20\111\156\166\40\43\x20{$sale->id}", $ref, $request->warehouse[$key]); } } $discount = $request->discount; $dc = $request->dc; $net = $total + $dc - $discount; $sale->update(array("\x74\157\x74\141\154" => $net)); if ($request->status == "\x70\x61\x69\144") { sale_payments::create(array("\163\x61\154\145\163\111\104" => $sale->id, "\141\x63\x63\x6f\x75\156\164\111\104" => $request->accountID, "\x64\141\x74\145" => $request->date, "\141\x6d\157\x75\156\164" => $net, "\156\157\164\145\163" => "\x46\165\154\154\x20\x50\x61\x69\x64", "\162\145\x66\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, $net, 0, "\120\141\171\155\145\x6e\x74\40\x6f\146\40\111\156\x76\x20\116\x6f\x2e\40{$sale->id}", $ref); } elseif ($request->status == "\x61\x64\x76\141\156\x63\145\x64") { $balance = getAccountBalance($request->customerID); if ($net < $balance) { createTransaction($request->customerID, $request->date, $net, 0, "\120\x65\x6e\x64\x69\156\x67\x20\101\155\x6f\165\x6e\164\x20\157\x66\x20\x49\156\166\x20\x4e\x6f\56\x20{$sale->id}", $ref); DB::commit(); return back()->with("\x73\165\x63\x63\x65\x73\x73", "\123\141\154\x65\x20\103\162\x65\x61\164\145\144\x3a\40\102\141\x6c\141\x6e\x63\145\x20\x77\141\x73\40\x6e\157\164\x20\x65\x6e\157\x75\147\150\40\155\157\166\x65\x64\40\164\157\x20\x75\x6e\160\141\x69\x64\40\x2f\40\x70\x65\156\x64\151\156\147"); } sale_payments::create(array("\163\x61\154\x65\x73\111\x44" => $sale->id, "\141\x63\143\157\x75\156\164\111\104" => $request->accountID, "\x64\x61\164\145" => $request->date, "\x61\155\x6f\165\156\x74" => $net, "\x6e\x6f\164\145\x73" => "\106\x75\x6c\x6c\40\x50\141\151\x64", "\162\145\x66\x49\104" => $ref)); createTransaction($request->customerID, $request->date, $net, 0, "\111\156\x76\x20\116\157\56\x20{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, $net, 0, "\x50\145\156\x64\151\x6e\147\x20\x41\x6d\157\165\x6e\x74\40\157\x66\40\111\x6e\166\x20\x4e\157\56\x20{$sale->id}", $ref); } DB::commit(); return to_route("\x73\141\154\145\x2e\x73\x68\157\x77", $sale->id)->with("\x73\x75\143\x63\145\163\x73", "\123\x61\x6c\145\40\x43\162\x65\x61\x74\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\162\x72\157\162", $e->getMessage()); } } public function show(sales $sale) { return view("\x73\x61\x6c\x65\163\x2e\x76\151\145\167", compact("\x73\141\x6c\x65")); } public function pdf($id) { $sale = sales::find($id); $template = view("\x73\x61\x6c\x65\163\56\x76\x69\145\x77", compact("\x73\141\x6c\x65"))->render(); Browsershot::html($template)->setIncludePath("\x24\x50\101\124\x48\72\57\x63\x2f\154\x61\x72\x61\x67\157\156\x2f\142\x69\156\57\x6e\x6f\x64\x65\152\x73\x2f\x6e\157\144\145\55\166\x31\x38\x2f")->pdf(); } public function edit(sales $sale) { $products = products::orderby("\x6e\x61\155\145", "\x61\163\x63")->get(); $warehouses = warehouses::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); return view("\x73\141\154\145\163\56\145\144\151\x74", compact("\160\x72\x6f\x64\x75\x63\164\163", "\167\141\x72\x65\x68\x6f\x75\163\145\163", "\143\165\x73\x74\157\155\x65\x72\x73", "\x61\143\143\157\x75\x6e\x74\x73", "\x73\x61\x6c\x65")); } public function update(Request $request, $id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\x72\x65\146\111\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\145\x66\111\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\x72\145\146\x49\104", $sale->refID)->delete(); $ref = $sale->refID; $sale->update(array("\x63\x75\x73\164\x6f\x6d\x65\x72\111\104" => $request->customerID, "\x64\x61\164\145" => $request->date, "\x6e\157\x74\x65\x73" => $request->notes, "\144\x69\x73\143\157\165\156\x74" => $request->discount, "\x64\x63" => $request->dc)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { if ($request->amount[$key] > 0) { $qty = $request->qty[$key]; $price = $request->price[$key]; $total += $request->amount[$key]; sale_details::create(array("\x73\x61\154\145\163\111\104" => $sale->id, "\160\x72\x6f\144\165\143\164\x49\104" => $id, "\160\162\x69\x63\145" => $price, "\x77\141\x72\145\x68\x6f\165\x73\x65\x49\104" => $request->warehouse[$key], "\161\x74\171" => $qty, "\x61\155\157\165\156\x74" => $request->amount[$key], "\x64\x61\164\x65" => $request->date, "\x72\x65\x66\111\x44" => $ref)); createStock($id, 0, $qty, $request->date, "\123\x6f\154\x64\x20\x69\156\x20\111\x6e\166\40\43\x20{$sale->id}", $ref, $request->warehouse[$key]); } } $discount = $request->discount; $dc = $request->dc; $net = $total + $dc - $discount; $sale->update(array("\x74\x6f\x74\141\x6c" => $net)); if ($request->status == "\160\x61\151\144") { sale_payments::create(array("\x73\x61\154\x65\163\111\x44" => $sale->id, "\x61\x63\143\157\x75\156\164\x49\104" => $request->accountID, "\144\x61\x74\145" => $request->date, "\x61\x6d\157\x75\x6e\164" => $net, "\156\x6f\x74\145\163" => "\106\x75\x6c\x6c\x20\x50\141\x69\x64", "\x72\x65\x66\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, $net, 0, "\x50\141\x79\x6d\x65\156\x74\40\157\x66\x20\x49\156\166\x20\x4e\x6f\x2e\x20{$sale->id}", $ref); } elseif ($request->status == "\141\144\x76\141\x6e\143\x65\x64") { $balance = getAccountBalance($request->customerID); if ($net < $balance) { createTransaction($request->customerID, $request->date, $net, 0, "\120\145\156\x64\151\x6e\147\40\x41\x6d\x6f\165\156\x74\40\x6f\146\40\111\156\166\40\116\x6f\x2e\x20{$sale->id}", $ref); DB::commit(); return back()->with("\163\165\x63\x63\x65\x73\x73", "\123\141\x6c\x65\x20\103\x72\145\141\164\145\x64\x3a\x20\102\x61\154\x61\x6e\x63\x65\x20\167\x61\163\x20\x6e\157\164\x20\x65\x6e\x6f\x75\x67\150\x20\x6d\157\166\145\x64\40\164\x6f\x20\x75\156\160\x61\151\x64\40\x2f\40\x70\145\156\x64\151\156\x67"); } sale_payments::create(array("\x73\x61\154\145\163\x49\x44" => $sale->id, "\x61\x63\x63\157\165\x6e\x74\x49\x44" => $request->accountID, "\144\141\x74\145" => $request->date, "\x61\x6d\157\165\x6e\x74" => $net, "\156\x6f\x74\145\x73" => "\106\165\x6c\154\40\120\141\151\x64", "\x72\x65\146\111\104" => $ref)); createTransaction($request->customerID, $request->date, $net, 0, "\111\156\x76\x20\116\157\56\x20{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, $net, 0, "\x50\x65\156\144\x69\x6e\147\40\x41\x6d\x6f\165\x6e\164\x20\x6f\x66\40\111\156\x76\40\116\157\x2e\x20{$sale->id}", $ref); } DB::commit(); return to_route("\163\141\154\x65\x2e\x69\156\144\x65\x78")->with("\x73\x75\x63\143\x65\163\163", "\x53\x61\x6c\x65\x20\125\x70\x64\141\164\145\144"); } catch (\Exception $e) { DB::rollBack(); return to_route("\x73\x61\x6c\x65\56\x69\156\144\145\170")->with("\145\162\x72\x6f\x72", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\162\145\x66\x49\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\145\146\111\104", $product->refID)->delete(); $product->delete(); } transactions::where("\162\x65\146\111\104", $sale->refID)->delete(); $sale->delete(); DB::commit(); session()->forget("\143\157\156\146\x69\162\155\x65\x64\137\160\141\x73\x73\x77\x6f\x72\144"); return to_route("\163\141\154\x65\56\151\156\x64\145\170")->with("\x73\x75\143\143\x65\x73\163", "\x53\141\154\x65\40\104\145\x6c\145\164\x65\x64"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\157\156\x66\151\162\x6d\145\x64\x5f\160\141\163\x73\167\157\162\x64"); return to_route("\x73\x61\154\145\x2e\151\x6e\x64\x65\x78")->with("\x65\162\162\x6f\162", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::with("\x75\156\151\164")->find($id); return $product; } }