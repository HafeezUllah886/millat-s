<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\transactions; use Barryvdh\DomPDF\Facade\Pdf; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Symfony\Component\Finder\Exception\AccessDeniedException; class AccountsController extends Controller { public function index($filter) { $accounts = accounts::where("\164\x79\x70\145", $filter)->orderBy("\151\144", "\141\163\143")->get(); return view("\x46\x69\x6e\141\x6e\x63\145\x2e\x61\143\x63\x6f\x75\156\164\x73\x2e\x69\x6e\144\x65\x78", compact("\141\x63\x63\157\165\156\164\163", "\146\151\x6c\164\145\162")); } public function create() { return view("\x46\151\156\x61\156\x63\x65\x2e\141\143\143\x6f\165\156\x74\163\56\143\x72\145\x61\164\x65"); } public function store(Request $request) { $request->validate(array("\x74\x69\164\x6c\145" => "\x72\x65\161\165\151\x72\145\x64\174\x75\156\151\x71\x75\145\x3a\141\143\x63\x6f\165\156\x74\163\54\164\151\164\154\145"), array("\x74\151\x74\x6c\x65\x2e\162\145\x71\x75\151\x72\x65\144" => "\x50\x6c\x65\x61\163\145\40\x45\x6e\x74\x65\162\40\101\143\x63\157\x75\x6e\x74\40\124\151\x74\x6c\x65", "\x74\151\x74\x6c\x65\56\x75\156\x69\161\x75\145" => "\x41\143\143\x6f\x75\x6e\164\x20\167\x69\x74\x68\40\164\150\151\163\40\164\x69\x74\x6c\145\40\x61\154\x72\145\x61\144\x79\x20\145\x78\x69\x73\164\163")); try { DB::beginTransaction(); $ref = getRef(); if ($request->type == "\103\x75\x73\164\157\x6d\x65\x72") { $account = accounts::create(array("\x74\x69\x74\154\x65" => $request->title, "\x74\171\160\145" => $request->type, "\143\x61\x74\145\147\x6f\162\171" => $request->category, "\143\x6f\156\x74\141\x63\164" => $request->contact, "\x61\x64\x64\162\x65\163\x73" => $request->address)); } else { $account = accounts::create(array("\x74\x69\x74\x6c\145" => $request->title, "\x74\x79\160\145" => $request->type, "\x63\141\x74\x65\147\157\x72\171" => $request->category)); } if ($request->initial > 0) { if ($request->initialType == "\60") { createTransaction($account->id, now(), $request->initial, 0, "\111\x6e\151\x74\151\x61\x6c\40\101\x6d\157\165\x6e\164", $ref); } else { createTransaction($account->id, now(), 0, $request->initial, "\111\156\151\164\151\x61\154\40\101\x6d\157\x75\156\164", $ref); } } DB::commit(); return back()->with("\163\165\143\143\x65\163\163", "\x41\x63\143\x6f\x75\156\x74\x20\103\x72\x65\141\x74\145\x64\x20\x53\165\x63\x63\145\163\x73\146\x75\154\154\x79"); } catch (\Exception $e) { return back()->with("\x65\162\162\x6f\x72", $e->getMessage()); } } public function show($id, $from, $to) { $account = accounts::find($id); $transactions = transactions::where("\x61\x63\x63\x6f\x75\156\164\x49\x44", $id)->whereBetween("\x64\x61\164\145", array($from, $to))->get(); $pre_cr = transactions::where("\141\143\x63\157\165\156\164\x49\x44", $id)->whereDate("\x64\141\164\145", "\x3c", $from)->sum("\x63\162"); $pre_db = transactions::where("\x61\x63\x63\157\165\x6e\x74\x49\x44", $id)->whereDate("\x64\141\164\145", "\74", $from)->sum("\x64\x62"); $pre_balance = $pre_cr - $pre_db; $cur_cr = transactions::where("\141\143\x63\157\x75\156\x74\x49\x44", $id)->sum("\143\x72"); $cur_db = transactions::where("\x61\x63\143\157\165\156\x74\x49\104", $id)->sum("\144\142"); $cur_balance = $cur_cr - $cur_db; return view("\106\x69\156\x61\156\143\145\x2e\141\x63\143\157\165\156\164\163\56\x73\x74\141\x74\x6d\x65\156\164", compact("\141\x63\143\x6f\x75\x6e\164", "\x74\162\141\156\163\141\x63\x74\151\x6f\x6e\163", "\160\162\145\137\x62\x61\154\141\x6e\143\x65", "\x63\x75\162\x5f\x62\141\x6c\141\x6e\x63\145", "\146\x72\x6f\x6d", "\164\157")); } public function pdf($id, $from, $to) { $account = accounts::find($id); $transactions = transactions::where("\141\143\143\x6f\x75\156\x74\111\104", $id)->whereBetween("\x64\141\x74\x65", array($from, $to))->get(); $pre_cr = transactions::where("\141\x63\x63\x6f\x75\156\x74\111\104", $id)->whereDate("\x64\141\x74\145", "\74", $from)->sum("\x63\162"); $pre_db = transactions::where("\x61\x63\143\x6f\x75\156\x74\111\x44", $id)->whereDate("\144\141\x74\x65", "\74", $from)->sum("\x64\x62"); $pre_balance = $pre_cr - $pre_db; $cur_cr = transactions::where("\x61\143\143\157\165\x6e\164\x49\104", $id)->sum("\143\162"); $cur_db = transactions::where("\x61\x63\x63\x6f\165\x6e\x74\111\104", $id)->sum("\x64\x62"); $cur_balance = $cur_cr - $cur_db; $pdf = Pdf::loadview("\106\x69\156\141\x6e\143\145\56\x61\x63\143\157\165\156\164\163\56\160\x64\146", compact("\x61\143\x63\157\165\x6e\x74", "\x74\x72\141\x6e\163\141\x63\x74\151\x6f\x6e\x73", "\160\x72\145\x5f\x62\141\154\141\156\143\x65", "\143\x75\x72\137\x62\x61\154\141\156\x63\x65", "\146\162\157\x6d", "\x74\157")); return $pdf->download("\101\143\x63\157\x75\156\164\x20\123\164\141\164\145\x6d\145\x6e\x74\x20\55\40{$account->id}\56\x70\144\146"); } public function edit(accounts $account) { return view("\106\x69\156\141\x6e\143\145\56\141\143\x63\157\x75\156\164\163\56\145\x64\x69\164", compact("\141\x63\x63\157\165\x6e\x74")); } public function update(Request $request, accounts $account) { $request->validate(array("\164\151\164\154\145" => "\162\x65\x71\x75\x69\x72\145\x64\x7c\165\156\151\161\165\x65\72\x61\143\x63\x6f\165\x6e\164\163\x2c\x74\x69\x74\154\x65\54" . $request->accountID), array("\164\x69\x74\154\145\x2e\x72\x65\x71\x75\x69\x72\x65\x64" => "\120\154\145\141\163\145\x20\105\x6e\x74\x65\162\40\101\143\143\157\x75\156\x74\40\x54\151\x74\154\145", "\x74\x69\x74\x6c\145\56\x75\156\151\x71\x75\145" => "\101\x63\x63\157\x75\156\164\x20\x77\x69\164\x68\40\164\x68\x69\x73\x20\164\151\x74\154\x65\40\141\154\162\x65\141\x64\x79\x20\145\170\x69\163\164\x73")); $account = accounts::find($request->accountID)->update(array("\x74\151\164\154\x65" => $request->title, "\143\141\164\145\x67\x6f\x72\171" => $request->category, "\143\x6f\x6e\164\x61\143\x74" => $request->contact ?? null, "\141\x64\x64\x72\x65\163\x73" => $request->address ?? null)); return redirect()->route("\x61\x63\x63\x6f\x75\156\164\x73\x4c\151\x73\x74", $request->type)->with("\x73\165\x63\x63\x65\x73\x73", "\101\143\143\157\x75\156\x74\x20\125\x70\x64\141\x74\x65\x64"); } public function destroy(accounts $accounts) { } }
